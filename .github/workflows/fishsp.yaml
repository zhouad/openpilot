name: Sync Fishsp Branches

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout openpilot repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          lfs: true
          fetch-depth: 0

      - name: 配置Git和LFS认证
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 为你的仓库配置LFS认证（用于推送）
          git config --global lfs.https://github.com/zhouad/openpilot.git/info/lfs.access basic
          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.GH_PAT }}@github.com" > ~/.git-credentials
          
          git lfs install --force
          
          echo "=== LFS认证验证 ==="
          git lfs env | grep -E "(Endpoint|Access)"

      - name: 检查源仓库LFS配置
        run: |
          echo "=== 添加fishsp远程仓库（公开只读） ==="
          git remote add fishsp https://github.com/fishsp/openpilot.git
          
          echo "=== 获取fishsp仓库信息 ==="
          git fetch fishsp v0971-sp --no-tags
          
          echo "=== 检查fishsp的.gitattributes ==="
          if git show fishsp/v0971-sp:.gitattributes 2>/dev/null; then
            echo "找到.gitattributes文件"
            git show fishsp/v0971-sp:.gitattributes | grep "filter=lfs" | head -5 || echo "没有LFS规则"
          else
            echo "没有.gitattributes文件"
          fi
          
          echo "=== 检查大文件（>10MB） ==="
          git ls-tree -r -l fishsp/v0971-sp | awk '$4 > 10*1024*1024 {print $4/1024/1024 "MB", $5}' | head -5 || echo "没有大文件"

      - name: 同步v0971-sp分支（智能LFS处理）
        run: |
          echo "=== 创建或切换到v0971-sp分支 ==="
          if git show-ref --verify --quiet refs/heads/v0971-sp; then
            git checkout v0971-sp
            echo "已切换到现有分支v0971-sp"
          else
            git checkout -b v0971-sp
            echo "已创建新分支v0971-sp"
          fi
          
          echo "=== 检查源仓库LFS使用情况 ==="
          if git show fishsp/v0971-sp:.gitattributes 2>/dev/null | grep -q "filter=lfs"; then
            echo "⚠️ 源仓库使用LFS，但LFS文件不可直接访问"
            echo "将同步代码历史，LFS文件将保持为指针状态"
            
            # 临时禁用LFS文件下载，只同步历史
            export GIT_LFS_SKIP_SMUDGE=1
            git config lfs.smudge "git-lfs smudge --skip"
            
            git merge fishsp/v0971-sp --allow-unrelated-histories || {
              echo "合并冲突，使用强制重置"
              git reset --hard fishsp/v0971-sp
            }
            
            # 恢复LFS配置
            git config --unset lfs.smudge || true
            unset GIT_LFS_SKIP_SMUDGE
            
            echo "=== 显示LFS指针文件示例 ==="
            git lfs ls-files | head -3 || echo "没有LFS文件"
            
          else
            echo "✓ 源仓库不使用LFS，执行常规同步"
            git merge fishsp/v0971-sp --allow-unrelated-histories || {
              echo "合并冲突，使用重置策略"
              git reset --hard fishsp/v0971-sp
            }
          fi
          
          echo "=== 检查同步后状态 ==="
          git log --oneline -3
          echo "当前分支: $(git branch --show-current)"

      - name: 推送到GitHub
        run: |
          echo "=== 推送分支历史 ==="
          git push -u origin v0971-sp --force
          
          echo "=== 检查是否有可推送的LFS文件 ==="
          if git lfs ls-files | grep -q .; then
            echo "发现LFS文件，尝试推送..."
            echo "注意：如果是从fishsp同步的LFS文件，它们可能是指针文件"
            
            # 尝试推送，但不要因为失败而终止整个工作流
            git lfs push --all origin || {
              echo "⚠️ LFS文件推送失败（可能是指针文件）"
              echo "这是正常的，因为源仓库的LFS文件不可直接访问"
            }
          else
            echo "✓ 没有LFS文件需要推送"
          fi
          
          echo "=== 同步完成 ==="
          echo "远程分支状态:"
          git ls-remote origin v0971-sp
